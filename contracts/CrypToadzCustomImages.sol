// SPDX-License-Identifier: MPL-2.0

pragma solidity ^0.8.13;

import "@divergencetech/ethier/contracts/utils/DynamicBuffer.sol";

import "./BufferUtils.sol";
import "./ICrypToadzCustomImages.sol";

///////////////////////////////////////////////////////////////////////////////////////////////////////////
// This contract was auto-generated by a tool, and may be overwritten. Do not make changes to this file. //
///////////////////////////////////////////////////////////////////////////////////////////////////////////

contract CrypToadzCustomImages is ICrypToadzCustomImages {

    mapping(uint256 => mapping(uint8 => uint16)) customImageLengths;
    mapping(uint256 => mapping(uint8 => address)) customImageData;

    function isCustomImage(uint tokenId) external view returns (bool) {
        return customImageData[tokenId][0] != address(0);
    }

    function getCustomImage(uint256 tokenId)
        external
        view
        returns (bytes memory buffer)
    {
        uint256 size;
        uint8 count;
        while (customImageLengths[tokenId][count] != 0) {
            size += customImageLengths[tokenId][count++];
        }

        buffer = DynamicBuffer.allocate(size);
        for (uint8 i = 0; i < count; i++) {
            bytes memory chunk = BufferUtils.decompress(
                customImageData[tokenId][i],
                customImageLengths[tokenId][i]
            );
            DynamicBuffer.appendUnchecked(buffer, chunk);
        }
    }

    constructor() {

    }
}