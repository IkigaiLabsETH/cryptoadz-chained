// SPDX-License-Identifier: MPL-2.0

pragma solidity ^0.8.13;

import "./ICrypToadzDeltas.sol";
import "./GIFDraw.sol";
import "./BufferUtils.sol";
import "./lib/SSTORE2.sol";

///////////////////////////////////////////////////////////////////////////////////////////////////////////
// This contract was auto-generated by a tool, and may be overwritten. Do not make changes to this file. //
///////////////////////////////////////////////////////////////////////////////////////////////////////////

contract CrypToadzDeltas is ICrypToadzDeltas {

    mapping(uint8 => address) deltaData;
    mapping(uint8 => uint16) deltaLengths;
    
    function drawDelta(GIFEncoder.GIFFrame memory frame, uint tokenId) external view returns (uint32[] memory buffer, uint position) {
        uint8 deltaFile = getDeltaFileForToken(tokenId);
        uint newPosition;
        if(deltaData[deltaFile] != address(0))
        {
            bytes memory deltaBuffer = BufferUtils.decompress(deltaData[deltaFile], deltaLengths[deltaFile]);
            (position,) = BufferUtils.advanceToTokenPosition(tokenId, deltaBuffer);
            position = GIFDraw.draw(frame, deltaBuffer, position, 0, 0, false);
        }
        return (frame.buffer, newPosition);
    }

    function getDeltaFileForToken(uint tokenId) public pure returns (uint8) {
        return 0;
    }
}