@page "/parity"
@inherits PageBase

<div class="container">
    
    <EditForm Model="@Model">
        <DataAnnotationsValidator />
        
        <div class="form-group">
            <label for="contractAddress">Contract Address:</label>
            <input id="contractAddress" type="text" class="form-control" @bind="Options.Value.ContractAddress" placeholder="CrypToadzChained Contract Address" />
        </div>

        <div class="form-group">
            <label for="rpcUrl">Rinkeby RPC URL:</label>
            <input id="rpcUrl" type="text" class="form-control" @bind="Options.Value.RpcUrl" placeholder="Rinkeby Web3 RPC URL"/>
        </div>

        <div class="form-group">
            <label for="parity">Parity Source:</label>
            <InputSelect id="parity" class="form-control"
                         ValueExpression="@(() => Model.Source)"
                         Value="Model.Source"
                         ValueChanged="@((ParitySource value) => @OnSourceChanged(value))">
                @foreach (var value in EnumExtensions.GetValues<ParitySource>())
                {
                    <option value="@value">@value.Describe()</option>
                }
            </InputSelect>
        </div>

        @switch (Model.Source)
        {
            case ParitySource.Provenance:
                <div class="form-group">
                    <label for="ipfsUrl">IPFS URL:</label>
                    <input id="ipfsUrl" type="text" class="form-control" @bind="@Options.Value.IpfsUrl" placeholder="IPFS Gateway URL"/>
                </div>
                break;
            case ParitySource.Current:
                <div class="form-group">
                    <label for="mainNetRpcUrl">MainNet RPC URL:</label>
                    <input id="mainNetRpcUrl" type="text" class="form-control" @bind="@Options.Value.MainNetRpcUrl" placeholder="MainNet Web3 RPC URL"/>
                </div>
                break;
        }

        <br/>

        @if (IsRunning)
        {
            <button class="btn btn-dark" disabled>
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Running...
            </button>

            <button class="btn btn-danger" @onclick="StopAsync">Cancel</button>
        }
        else
        {
            if (Model.Source == ParitySource.Current && !string.IsNullOrWhiteSpace(Options.Value.MainNetRpcUrl))
            {
                <button class="btn btn-dark" @onclick="StartAsync">Start Test</button>
            }
            else
            {
                <button class="btn btn-dark" @onclick="StartAsync" disabled>Start Test</button>
            }
        }

    </EditForm>
    
    <br/>
    <br/>
    
    @if (!string.IsNullOrWhiteSpace(Error))
    {
        <div class="alert alert-danger">@Error</div>
    }
    else if(_state != null)
    {
        <Table TableItem="ParityStateRow" Items="@_state.Rows" PageSize="15">
            <Column TableItem="ParityStateRow" Title="Token ID" Field="@(r => r.TokenId)" Sortable="true" Filterable="true" Width="10%" />
            <Column TableItem="ParityStateRow" Title="Source Image" Field="@(x => x.SourceImageUri!)" Sortable="true" Filterable="true" Width="20%">
                <Template>
                    @if (!string.IsNullOrWhiteSpace(@context.SourceImageUri))
                    {
                        <img style="image-rendering: -moz-crisp-edges; image-rendering: -webkit-crisp-edges; image-rendering: pixelated; width: 72px; height: 72px" src="@context.SourceImageUri" alt=""/>
                    }
                </Template>
            </Column>
            <Pager ShowPageNumber="true" ShowTotalCount="true" />
            <EmptyDataTemplate>
                No results yet.
            </EmptyDataTemplate>
        </Table>
    }
</div>


<br />
<br />

<div>
    <section>
        <div class="container">
        </div>
    </section>
</div>

@code
{
    [Parameter]
    public ParityOptions Model { get; set; } = new();

    [Parameter]
    public bool IsRunning { get; set; }

    [Parameter]
    public string? Error { get; set; }

    [Inject]
    public ParityService Service { get; set; } = null!;

    protected override Task OnInitializedAsync()
    {
        Logger?.LogInformation("OnChangeAsync registered");
        Service.OnChangeAsync += StateHasChangedAsync;
        return Task.CompletedTask;
    }

    private Task StateHasChangedAsync()
    {
        Logger?.LogInformation("StateHasChangedAsync invoking");
        return InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Service.OnChangeAsync -= StateHasChangedAsync;
        Logger?.LogInformation("OnChangeAsync unregistered");
    }

    private Task OnSourceChanged(ParitySource source)
    {
        Model.Source = source;
        return Task.CompletedTask;
    }
    
    private CancellationTokenSource? _cancellationTokenSource;
    private CancellationToken? _cancellationToken;
    private ParityState? _state;
    private Task<ParityState>? _pending;

    private async Task StartAsync()
    {
        if (IsRunning)
            return;

        Error = null;

        try
        {
            IsRunning = true;

            _cancellationTokenSource = new CancellationTokenSource();
            _cancellationToken = _cancellationTokenSource.Token;
            _pending = DoWorkAsync(_cancellationToken.GetValueOrDefault(CancellationToken.None));

            var result = await _pending;

            if (!IsCancelled)
            {
                _state = result;
            }
        }
        catch (Exception e)
        {
            var cancelled = IsCancelled;

            Error = cancelled
                ? "Parity check was cancelled by the user" 
                : e.Message;

            if (!cancelled)
            {
                Logger.LogError(e, "Failed parity check");
            }
        }
        finally
        {
            FinishTask();
        }
    }

    private Task StopAsync()
    {
        try
        {
            _cancellationTokenSource?.Cancel();
            _cancellationToken?.ThrowIfCancellationRequested();
        }
        catch (Exception e)
        {
            var cancelled = IsCancelled;

            Error = cancelled
                ? "Parity check was cancelled by the user" 
                : e.Message;

            if (!cancelled)
            {
                Logger.LogError(e, "Failed parity check");
            }
        }
        finally
        {
            FinishTask();
        }
        
        return Task.CompletedTask;
    }

    private bool IsCancelled => (_cancellationTokenSource?.IsCancellationRequested).GetValueOrDefault();

    private void FinishTask()
    {
        IsRunning = false;
        {
            _cancellationToken = null;
            _cancellationTokenSource?.Dispose();
            _cancellationTokenSource = null;
        }
        StateHasChanged();
    }

    private async Task<ParityState> DoWorkAsync(CancellationToken cancellationToken)
    {
        _state = new ParityState();
        cancellationToken.ThrowIfCancellationRequested();

        await Service.StartAsync(Model, _state, Http, Options.Value.MainNetRpcUrl!, 
            continueOnError: false,
            logger: Logger,
            cancellationToken: cancellationToken);

        return _state;
    }
}
