@page "/parity"
@inherits PageBase

<div class="container">
    
    <EditForm Model="@Model">
        <DataAnnotationsValidator />
        
        <div class="form-group">
            <label for="contractAddress">CrypToadzChained Address:</label>
            <input id="contractAddress" type="text" class="form-control" @bind="Options.Value.ContractAddress" placeholder="CrypToadzChained Contract Address" />
        </div>
        
        <br />
        
        <ToggleInputText Label="Rinkeby Web3 RPC URL" @bind-Text="@Options.Value.RpcUrl" @bind-HideFields="@Options.Value.HideSensitiveFields"></ToggleInputText>
        
        <div class="form-group">
            <label for="source">Source:</label>
            <InputSelect id="source" class="form-control"
                         ValueExpression="@(() => Model.Source)"
                         Value="Model.Source"
                         ValueChanged="@((ParitySource value) => @OnSourceChanged(value))">
                @foreach (var value in EnumExtensions.GetValues<ParitySource>())
                {
                    <option value="@value">@value.Describe()</option>
                }
            </InputSelect>
        </div>
        
        <br />
        
        @switch (Model.Source)
        {
            case ParitySource.Provenance:
                <ToggleInputText Label="IPFS Gateway URL" @bind-Text="@Options.Value.IpfsUrl" @bind-HideFields="@Options.Value.HideSensitiveFields"></ToggleInputText>
                break;
            case ParitySource.Arweave:
                <ToggleInputText Label="MainNet Web3 RPC URL" @bind-Text="@Options.Value.MainNetRpcUrl" @bind-HideFields="@Options.Value.HideSensitiveFields"></ToggleInputText>
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

        <br />
        
        <div class="form-group">
            <label for="scope">Scope:</label>
            <InputSelect id="scope" class="form-control"
                         ValueExpression="@(() => Model.Scope)"
                         Value="Model.Scope"
                         ValueChanged="@((ParityScope value) => @OnScopeChanged(value))">
                @foreach (var value in EnumExtensions.GetValues<ParityScope>())
                {
                    <option value="@value">@value.Describe() (@ParityService.GetScopeIdCount((ParityScope) @value))</option>
                }
            </InputSelect>
        </div>
        
        <br /> 

        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="continueOnError" @bind="Model.ContinueOnError">
            <label class="form-check-label" for="continueOnError">Continue on error</label>
        </div>

        <br />
        
        @if (!IsRunning && string.IsNullOrWhiteSpace(Error) && _state != null)
        {
            if (_state.Errors.Count == 0)
            {
                <div class="alert alert-success">Tests passed :)</div>
            }
            else
            {
                <div class="alert alert-danger">Tests failed :(</div>
            }
        }

        @if (IsRunning)
        {
            <button class="btn btn-dark" disabled>
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Running...
            </button>

            <button class="btn btn-danger" @onclick="StopAsync">Cancel</button>
        }
        else
        {
            if (Model.Source == ParitySource.Arweave && !string.IsNullOrWhiteSpace(Options.Value.MainNetRpcUrl))
            {
                <button class="btn btn-dark" @onclick="StartAsync">Start Test</button>
            }
            else
            {
                <button class="btn btn-dark" @onclick="StartAsync" disabled>Start Test</button>
            }
        }

    </EditForm>
    
    <br/>
    <br/>
    
    @if (!string.IsNullOrWhiteSpace(Error))
    {
        <div class="alert alert-danger">@Error</div>
    }

    @if(_state != null)
    {
        <Table TableItem="ParityStateRow" Items="@_state.Rows" PageSize="15">
            <Column TableItem="ParityStateRow" Title="Token ID" Field="@(r => r.TokenId)" Sortable="true" Filterable="true" Width="72px"/>
            <Column TableItem="ParityStateRow" Title="@Enum.GetName(Model.Source)" Field="@(x => x.SourceImageUri!)" Sortable="true" Filterable="true" Width="72px">
                <Template>
                    @if (!string.IsNullOrWhiteSpace(context.SourceImageUri))
                    {
                        <img style="image-rendering: -moz-crisp-edges; image-rendering: -webkit-crisp-edges; image-rendering: pixelated; width: 72px; height: 72px" src="@context.SourceImageUri" alt=""/>
                    }
                </Template>
            </Column>
            <Column TableItem="ParityStateRow" Title="On-Chain" Field="@(x => x.TargetImageUri!)" Sortable="true" Filterable="true" Width="72px">
                <Template>
                    @if (!string.IsNullOrWhiteSpace(context.TargetImageUri))
                    {
                        <img style="image-rendering: -moz-crisp-edges; image-rendering: -webkit-crisp-edges; image-rendering: pixelated; width: 72px; height: 72px" src="@context.SourceImageUri" alt=""/>
                    }
                </Template>
            </Column>
            <Column TableItem="ParityStateRow" Title="Image Delta" Field="@(x => x.DeltaImageUri!)" Sortable="true" Filterable="true" Width="72px">
                <Template>
                    @if (!string.IsNullOrWhiteSpace(context.DeltaImageUri))
                    {
                        <div class="imageOverlay">
                            <img style="image-rendering: -moz-crisp-edges; image-rendering: -webkit-crisp-edges; image-rendering: pixelated; width: 72px; height: 72px" src="@context.DeltaImageUri" alt=""/>
                            @if (context.BadPixels.GetValueOrDefault() == 0)
                            {
                                <div class="centeredOverImage" style="color: green;">
                                    <i class="oi oi-circle-check align-middle" aria-hidden="true"></i>
                                </div>
                            }
                            else
                            {
                                <div class="centeredOverImage" style="color: red;">
                                    <i class="oi oi-circle-x align-middle" aria-hidden="true"></i>
                                </div>
                            }
                        </div>
                    }
                </Template>
            </Column>
            <Pager ShowPageNumber="true" ShowTotalCount="true" />
            <EmptyDataTemplate>
                No results yet.
            </EmptyDataTemplate>
        </Table>

        @if (_state.Errors.Count > 0)
        {
            <br/>

            <h4>Errors</h4>

            <Table TableItem="ParityError" Items="@_state.Errors" PageSize="15">
                <Column TableItem="ParityError" Title="TokenId" Field="@(r => r.TokenId)" Sortable="true" Filterable="true" />
                <Column TableItem="ParityError" Title="Message" Field="@(r => r.Message)" Sortable="true" Filterable="true"/>
                <Pager ShowPageNumber="true" ShowTotalCount="true"/>
            </Table>
        }
    }
</div>


<br />
<br />

<div>
    <section>
        <div class="container">
        </div>
    </section>
</div>

@code
{
    [Parameter]
    public ParityOptions Model { get; set; } = new();

    [Parameter]
    public bool IsRunning { get; set; }

    [Parameter]
    public string? Error { get; set; }

    [Inject]
    public ParityService Service { get; set; } = null!;
    
    protected override Task OnInitializedAsync()
    {
        Logger?.LogInformation("OnChangeAsync registered");
        Service.OnChangeAsync += StateHasChangedAsync;
        return Task.CompletedTask;
    }

    private async Task StateHasChangedAsync()
    {
        Logger?.LogInformation("StateHasChangedAsync invoking");

        await TryRunDeltasAsync();

        await InvokeAsync(StateHasChanged);
    }

    private async Task TryRunDeltasAsync()
    {
        if (_state != null)
        {
            foreach (var row in _state.Rows)
            {
                if (string.IsNullOrWhiteSpace(row.SourceImageUri) || string.IsNullOrWhiteSpace(row.TargetImageUri))
                    continue; // delta can't be processed

                if (!string.IsNullOrWhiteSpace(row.DeltaImageUri))
                    continue; // delta already processed

                var response = await Http.PostAsJsonAsync("toadz/compare", row);
                if (response.IsSuccessStatusCode)
                {
                    var json = await response.Content.ReadAsStringAsync();
                    var newRow = JsonSerializer.Deserialize<ParityStateRow>(json, new JsonSerializerOptions(JsonSerializerDefaults.Web));

                    if (newRow != null)
                    {
                        row.BadPixels = newRow.BadPixels;
                        row.DeltaImageUri = newRow.DeltaImageUri;

                        _state.Errors.Add(new ParityError { TokenId = row.TokenId, Message = $"Found {row.BadPixels} bad pixels in on-chain image"});
                    }
                }
                else
                {
                    _state.Errors.Add(new ParityError { TokenId = row.TokenId, Message = $"Error calling endpoint to compare images: {(int) response.StatusCode} {response.ReasonPhrase}"});
                }
            }
        }
    }

    public void Dispose()
    {
        Service.OnChangeAsync -= StateHasChangedAsync;
        Logger?.LogInformation("OnChangeAsync unregistered");
    }

    private Task OnSourceChanged(ParitySource source)
    {
        Model.Source = source;
        return Task.CompletedTask;
    }

    private Task OnScopeChanged(ParityScope scope)
    {
        Model.Scope = scope;
        return Task.CompletedTask;
    }
    
    private CancellationTokenSource? _cancellationTokenSource;
    private CancellationToken? _cancellationToken;
    private ParityState? _state;
    private Task<ParityState>? _pending;

    private async Task StartAsync()
    {
        if (IsRunning)
            return;

        Error = null;

        try
        {
            IsRunning = true;

            _cancellationTokenSource = new CancellationTokenSource();
            _cancellationToken = _cancellationTokenSource.Token;
            _pending = DoWorkAsync(_cancellationToken.GetValueOrDefault(CancellationToken.None));

            var result = await _pending;

            if (!IsCancelled)
            {
                _state = result;
            }
        }
        catch (Exception e)
        {
            var cancelled = IsCancelled;

            Error = cancelled
                ? "Parity check was cancelled by the user" 
                : e.Message;

            if (!cancelled)
            {
                Logger?.LogError(e, "Failed parity check");
            }
        }
        finally
        {
            FinishTask();
        }
    }

    private Task StopAsync()
    {
        try
        {
            _cancellationTokenSource?.Cancel();
            _cancellationToken?.ThrowIfCancellationRequested();
        }
        catch (Exception e)
        {
            var cancelled = IsCancelled;

            Error = cancelled
                ? "Parity check was cancelled by the user" 
                : e.Message;

            if (!cancelled)
            {
                Logger?.LogError(e, "Failed parity check");
            }
        }
        finally
        {
            FinishTask();
        }
        
        return Task.CompletedTask;
    }

    private bool IsCancelled => (_cancellationTokenSource?.IsCancellationRequested).GetValueOrDefault();

    private void FinishTask()
    {
        IsRunning = false;
        {
            _cancellationToken = null;
            _cancellationTokenSource?.Dispose();
            _cancellationTokenSource = null;
        }
        StateHasChanged();
    }

    private async Task<ParityState> DoWorkAsync(CancellationToken cancellationToken)
    {
        _state = new ParityState();
        cancellationToken.ThrowIfCancellationRequested();

        await Service.StartAsync(Model, _state, Http, Options.Value.MainNetRpcUrl!,
            rinkebyRpcUrl: Options.Value.RpcUrl,
            contractAddress: Options.Value.ContractAddress,
            logger: Logger,
            cancellationToken: cancellationToken);

        return _state;
    }
}
