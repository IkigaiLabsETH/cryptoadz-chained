@page "/{TokenId?}"
@inherits PageBase

<div class="container">
    
    <div class="form-group">
        <label for="url">Web3 URL:</label>
        <input id="url" type="text" class="form-control" @bind="Options.Value.Url" placeholder="Leave blank to use our server, or paste your own Web3 RPC URL (Rinkeby)" />
    </div>
    
    <br/>

    <div class="form-group">
        <label for="tokenId">Token ID:</label>
        <input id="tokenId" type="text" class="form-control" @bind="TokenId" placeholder="Enter the Token ID of a real CrypToadz NFT"/>
        <button class="btn btn-secondary" @onclick="OnFetchClicked">Fetch</button>
    </div>

</div>


<br />
<br />

<div>
    <section>
        <div class="container">
            
            @if (!string.IsNullOrWhiteSpace(Error))
            {
                <div class="alert alert-danger">@Error</div>
            }
            else
            {
                @if (Metadata != null)
                {
                    <div class="row align-items-start justify-content-around">
                        <div class="col-md-9 col-lg col-xl-4 sticky-lg-top mb-5 mb-lg-0">
                            <ul class="list-group">
                                @foreach (var metadataAttribute in Metadata.Attributes)
                                {
                                    <li class="list-group-item px-4 py-3 d-flex justify-content-between">
                                        <h6 class="mb-0">@metadataAttribute.TraitType</h6>
                                        <div><strong>@metadataAttribute.Value?.ToString()</strong></div>
                                    </li>
                                }
                            </ul>
                            
                            @if (!string.IsNullOrWhiteSpace(TokenId))
                            {
                                <br />
                    
                                <button class="btn btn-dark" @onclick="DownloadImageAsync">
                                    <i class="oi oi-data-transfer-download align-middle" aria-hidden="true"></i>
                                    <span class="align-middle">Image</span>
                                </button>

                                <button style="margin-left: 5px" class="btn btn-dark" @onclick="DownloadMetadataAsync">
                                    <i class="oi oi-data-transfer-download align-middle" aria-hidden="true"></i>
                                    <span class="align-middle">Metadata</span>
                                </button>

                                <button style="margin-left: 5px" class="btn btn-dark" @onclick="ShareAsync" target="_blank">
                                    <i class="oi oi-external-link align-middle" aria-hidden="true"></i>
                                    <span class="align-middle">Share</span>
                                </button>
                            }
                        </div>
                        <div class="col-xl-7 col-lg-8 col-md-9">
                            <article>
                                <h2 class="h2">@Metadata.Name</h2>
                                <p class="mb-5">
                                    @if (!IsLargeAnimation)
                                    {
                                        <img style="image-rendering: -moz-crisp-edges; image-rendering: -webkit-crisp-edges; image-rendering: pixelated; width: 100%; height: 100%" src="@ImageUri" alt="@Metadata.Name"/>
                                    }
                                    else
                                    {
                                        <img style="width: 100%; height: 100%" src="@ImageUri" alt="@Metadata.Name"/>
                                    }
                                    
                                </p>
                                <p class="lead text-center">
                                    @Metadata.Description
                                </p>
                            </article>
                        </div>
                    </div>
                }
                else if (IsLoading)
                {
                    <div class="spinner"></div>
                }
            }
            
        </div>
    </section>
</div>

@code
{
    [Parameter]
    public string? TokenUri { get; set; }

    [Parameter]
    public string? TokenId { get; set; }

    [Parameter]
    public string? ImageUri { get; set; }

    [Parameter]
    public string? ImageDataUri { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public JsonTokenMetadata? Metadata { get; set; }

    [Parameter]
    public string? Error { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(TokenId))
        {
            await OnFetchClicked();
        }
    }

    private async Task OnFetchClicked()
    {
        if (string.IsNullOrWhiteSpace(TokenId) || !uint.TryParse(TokenId, out var tokenId))
            return;


        IsLoading = true;

        try
        {
            Metadata = null;
            ImageUri = null;
            Error = null;

            if (!string.IsNullOrWhiteSpace(Options.Value.Url))
            {
                var service = new ToadzService();
                var body = await service.GetCanonicalTokenURIAsync(tokenId, Options.Value.Url, Options.Value.ContractAddress, Logger);
                await WithBodyAsync(body);
            }
            else
            {
                var response = await Http.GetAsync($"toadz/tokenURI/{tokenId}");
                await WithResponse(response, false);
            }
        }
        catch(Exception ex)
        {
            Logger.LogError(ex, "Failed to fetch tokenURI");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task WithResponse(HttpResponseMessage response, bool random)
    {
        if (response.IsSuccessStatusCode)
        {
            var body = await response.Content.ReadAsStringAsync();
            await WithBodyAsync(body);
        }
        else
        {
            Error = $"{(int) response.StatusCode} {response.ReasonPhrase}";
        }
    }

    private async Task WithBodyAsync(string body)
    {
        TokenUri = body;
        if (!TokenUri.StartsWith(JsonDataUri))
        {
            Error = TokenUri;
            TokenUri = null;
        }
        else
        {
            if (!string.IsNullOrWhiteSpace(TokenUri))
            {
                var data = TokenUri.Replace(JsonDataUri, "");
                var buffer = Convert.FromBase64String(data);
                var json = Encoding.UTF8.GetString(buffer);
                Metadata = JsonSerializer.Deserialize<JsonTokenMetadata>(json);
                ImageUri = Metadata?.Image;
                Nav.NavigateTo(TokenId ?? "/");

                //
                // Augment metadata from on-chain size information, if applicable:
                //
                
                if (Metadata != null && !string.IsNullOrWhiteSpace(TokenId))
                {
                    uint.TryParse(TokenId, out var tokenId);

                    if (!CustomAnimationTokenIds.Contains(tokenId) && !CustomAnimationTokenIds.Contains(tokenId))
                    {
                        bool isTall;
                        if (!string.IsNullOrWhiteSpace(Options.Value.Url))
                        {
                            var service = new ToadzService();
                            isTall = await service.GetIsTallAsync(tokenId, Options.Value.Url, Options.Value.ContractAddress, Logger);                            
                        }
                        else
                        {
                            isTall = await Http.GetFromJsonAsync<bool>($"toadz/tall/{tokenId}");
                        }

                        if (isTall)
                        {
                            var size = new JsonTokenMetadataAttribute
                            {
                                TraitType = "Size",
                                Value = isTall ? "Tall" : "Short"
                            };
                            Metadata.Attributes.Insert(0, size);
                        }
                    }
                }
            }
        }
    }
    
    private async Task DownloadImageAsync() => await DownloadImageAsync(ImageUri!, $"TOADZ_{TokenId}");

    private async Task DownloadMetadataAsync() => await DownloadMetadataAsync(Metadata!, $"TOADZ_{TokenId}", true);

    private async Task ShareAsync() => await ShareAsync($"/{TokenId}");

    
    #region LUTs

    private static readonly HashSet<uint> LargeAnimationTokenIds = new()
    {
        37,
        318,
        466,
        1943,
        3661,
        4035,
        4911,
        5086
    };

    private static readonly HashSet<uint> CustomAnimationTokenIds = new()
    {
        37,
        318,
        466,
        1519,
        1943,
        2208,
        3250,
        3661,
        4035,
        4911,
        5086,
        5844,
        6131,
        43000000,
        48000000
    };

    private static readonly HashSet<uint> CustomImageTokenIds = new()
    {
        123,
        316,
        472,
        491,
        703,
        864,
        916,
        936,
        966,
        1005,
        1165,
        1423,
        1559,
        1637,
        1703,
        1754,
        1793,
        1812,
        1935,
        1975,
        2124,
        2232,
        2327,
        2469,
        2471,
        2482,
        2489,
        2521,
        2569,
        2579,
        2709,
        2825,
        2839,
        2846,
        2865,
        2959,
        2986,
        3196,
        3309,
        3382,
        3703,
        4096,
        4126,
        4152,
        4192,
        4201,
        4221,
        4238,
        4368,
        4578,
        4580,
        4604,
        4714,
        4773,
        4845,
        4896,
        5128,
        5150,
        5262,
        5441,
        5471,
        5730,
        5836,
        5848,
        5902,
        6214,
        6382,
        6491,
        6572,
        6578,
        6631,
        6719,
        6736,
        6852,
        6894,
        6916,
        1000000,
        2000000,
        3000000,
        4000000,
        5000000,
        6000000,
        7000000,
        8000000,
        9000000,
        10000000,
        11000000,
        12000000,
        13000000,
        14000000,
        15000000,
        16000000,
        17000000,
        18000000,
        19000000,
        20000000,
        21000000,
        22000000,
        23000000,
        24000000,
        25000000,
        26000000,
        27000000,
        28000000,
        29000000,
        30000000,
        31000000,
        32000000,
        33000000,
        34000000,
        35000000,
        36000000,
        37000000,
        38000000,
        39000000,
        40000000,
        41000000,
        42000000,
        44000000,
        45000000,
        46000000,
        47000000,
        49000000,
        50000000,
        51000000,
        52000000,
        53000000,
        54000000,
        55000000,
        56000000
    };

    public bool IsLargeAnimation => (uint.TryParse(Metadata?.Name?.Replace("CrypToadz #", ""), out var tokenId) && LargeAnimationTokenIds.Contains(tokenId));

    #endregion
}
